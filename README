В git разнес по веткам - их не нужно сливать - там разные проекты, хотя по именам не 
пересекаются. кроме readme

датчики для ардуино

# температуры и концевики
    * цеплять к ардуине до 5х температурных датчиков ds1820
    * обрабатывать состояние до 4х контактов D4-D8
    * защитить входные контакты через резисторы 1к со стороны pin. внутри есть pullup.
    * контакты опрашивает раз 100мсек 
##    цеплять к ардуине до 5х температурных датчиков ds1820
    * обрабатывать состояние до 4х контактов D3-D7
    * защитить входные контакты через резисторы 1к со стороны pin. внутри есть pullup.
    * контакты опрашивает раз 100мсек 

## используемые pin

    * ONE_WIRE_BUS 2
    * SerialTxControl? 10
    * PIN4-PIN8 для датчиков состояния 

## mqtt topic топики ArduSens
# железо
    * нужен RTC, там же и память. записывать значение в eeprom. ​exmpl1 ​exmpl2
    показывает расход на 7 сегментнике - ddd.d куб.м ​Часы на Arduino используя DS3231
    * Берется счетчик с импульсным выходом. Один импульс на 10л воды. #36
    На ардуине импульсы заводятся на прерывания. В цикле 0.1 сек они проверяются если изменились, то каждые 5 минут записываются в eprom и передаются в брокера. Там же могут быть термометры - на подвал и воду. отличается от ArduSens
    * сделать кнопку показать на дисплее значение 

# используемые pin
```
// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 2
// Module connection pins (Digital Pins)
#define DISPLAY_CLK 3
#define DISPLAY_DIO 4

// выход со счетчика
#define WATER_COUNTER_PIN 5
// показать/убрать показания на дисплее
#define DISPLAY_BUTTON_PIN 6
#define IN_PIN_START 7
// чило сканируемых pin 
#define IN_PIN_COUNT 3
// pin для управления передачей по rs485
#define SerialTxControl 10
// PIN  A4(SDA),A5(SCL) - I2C
```
* A4(SDA),A5(SCL) - I2C

#MQTT topic

стандартные от ArduSens. меняется название датчика и добавляется сообщение
>>>>>>> origin/ArduWater

    HHHH - номер платы
    XXXXXXXXXXXXXXX адрес датчика
    N номер контакта 

    ArduStatHHHH/INFO/count=val - число термометров один раз при старте
    ArduStatHHHH/DS1820-XXXXXXXXXXXXXXX/INFO/resolution=val - один раз при старте
    ArduStatHHHH/DS1820-XXXXXXXXXXXXXXX/value=val - температура. раз в 60 сек при изменении
    ArduStatHHHH/latch-N/value=val - состояние контакта раз в 0.1 сек
    ArduStatHHHH/INFO/alive=cnt раз в 60 сек счетчик на каждое сообщение +1(%256) 

```
import paho.mqtt.client as mqtt
import time
client= mqtt.Client("control1") 
client.username_pw_set('yhome', 'q1w2e3')
client.connect('172.20.100.2')
client.publish("stat/sensor_1/temperature1", "-15")
client.publish("stat/sensor_1/temperature2", "15")
client.publish("stat/sensor_1/input1", "0")
client.publish("stat/sensor_1/input2", "1")
```

## используются адаптеры:

  *  ​http://roboshop.spb.ru/USB-RS485-converter
  *  ​http://roboshop.spb.ru/TTL-to-RS485-MAX485-module 

    :01ArduWaterHHHH/water=val - сколько насчитано литров/10
    :01ArduWaterHHHH/INFO/count=val - число термометров один раз при старте
    :01ArduWaterHHHH/DS1820-XXXXXXXXXXXXXXX/INFO/resolution=val - один раз при старте 
    :01ArduWaterHHHH/DS1820-XXXXXXXXXXXXXXX/temp=val - температура. раз в 60 сек при изменении
    :01ArduWaterHHHH/latch-N=val - состояние контакта раз в 0.1 сек
    :01ArduWaterHHHH/INFO/alive=cnt раз в 60 сек счетчик на каждое сообщение +1(%256) 

